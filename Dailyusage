AzureDiagnostics
| where Category == "PostgreSQLLogs"
| where Message has "duration:"
| parse Message with * "duration: " duration:double " ms" *
| where duration > 1000
| project TimeGenerated, duration, Message
| sort by duration desc


AzureDiagnostics
| where Category == "PostgreSQLLogs"
| where Message has "deadlock detected"
| project TimeGenerated, Message

AzureDiagnostics
| where Category == "PostgreSQLLogs"
| parse Message with Operation:string " " *
| where Operation in ("select", "insert", "update", "delete")
| summarize QueryCount = count() by Operation, bin(TimeGenerated, 1m)

AzureDiagnostics
| where Category == "PostgreSQLSessions"
| summarize SessionCount = count() by bin(TimeGenerated, 5m)


AzureDiagnostics
| where Category == "PostgreSQLLogs"
| where Message startswith "duration:"
| extend DurationMs = todouble(extract(@"duration: ([0-9\.]+)", 1, Message))
| extend Statement = extract(@"statement: (.*)", 1, Message)
| extend Operation = tostring(split(trim(" ", Statement), " ")[0])
| where isnotempty(Operation) and DurationMs > 5000
| summarize LongRunningQueryCount = count() by Operation, bin(TimeGenerated, 1m)
| order by TimeGenerated desc

AzureDiagnostics
| where Category == "PostgreSQLLogs"
| where isnotempty(Message)
| extend QueryType =
    case(
        Message has "SELECT", "SELECT",
        Message has "INSERT", "INSERT",
        Message has "UPDATE", "UPDATE",
        Message has "DELETE", "DELETE",
        Message has "CREATE", "CREATE",
        Message has "DROP",   "DROP",
        Message has "ALTER",  "ALTER",
        "UNKNOWN"
    )
| where QueryType != "UNKNOWN"
| summarize QueriesPerMinute = count() by bin(TimeGenerated, 1m), QueryType
| order by TimeGenerated desc



let logs = AzureDiagnostics
| where Category == "PostgreSQLLogs"
| where isnotempty(Message)
| extend QueryType = extract(@"\b(SELECT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER)\b", 1, Message)
| extend QueryType = iif(isempty(QueryType), "OTHER", QueryType)
| project TimeGenerated, QueryType;

logs
| summarize Count = count() by bin(TimeGenerated, 1m), QueryType
| join kind=inner (
    logs
    | summarize TotalCount = count() by QueryType
) on QueryType


{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "monitorAccountName": {
      "type": "string"
    },
    "resourceGroupName": {
      "type": "string"
    },
    "ruleName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "actionGroupResourceId": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Monitor/accounts/prometheusRules",
      "apiVersion": "2023-04-03-preview",
      "name": "[format('{0}/{1}', parameters('monitorAccountName'), parameters('ruleName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "properties": {
        "description": "High error rate alert",
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Monitor/accounts', parameters('monitorAccountName'))]"
        ],
        "severity": 2,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "name": "HighErrorRate",
              "query": "sum(rate(http_server_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_server_requests_total[5m]))",
              "threshold": 0.05,
              "operator": "GreaterThan"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[parameters('actionGroupResourceId')]"
          }
        ]
      }
    }
  ]
}
{
  "monitorAccountName": {
    "value": "your-monitor-account-name"
  },
  "resourceGroupName": {
    "value": "your-resource-group"
  },
  "ruleName": {
    "value": "high-error-rate-alert"
  },
  "location": {
    "value": "eastus2"
  },
  "actionGroupResourceId": {
    "value": "/subscriptions/xxxxxx/resourceGroups/your-rg/providers/microsoft.insights/actionGroups/your-action-group"
  }
}


az deployment group create \
  --resource-group <RESOURCE_GROUP> \
  --template-file prometheus-alert-rule-template.json \
  --parameters @prometheus-alert-rule-parameters.json


pg_stat_activity_long:
  query: |
    SELECT
      pid,
      now() - query_start AS duration_seconds,
      query,
      state,
      datname
    FROM pg_stat_activity
    WHERE state = 'active' AND now() - query_start > interval '5 seconds';
  metrics:
    - duration_seconds:
        usage: "GAUGE"
        description: "Duration a query has been running"
        labels:
          - pid
          - query
          - state
          - datname

pg_stat_statements_by_operation:
  query: |
    SELECT
      upper(split_part(trim(query), ' ', 1)) AS operation,
      count(*) AS count
    FROM pg_stat_statements
    GROUP BY operation;
  metrics:
    - count:
        usage: "GAUGE"
        description: "Count of queries by SQL operation (SELECT, INSERT, etc.)"
        labels:
          - operation

pg_locks_blocked:
  query: |
    SELECT
      mode,
      count(*) AS count
    FROM pg_locks
    WHERE granted = false
    GROUP BY mode;
  metrics:
    - count:
        usage: "GAUGE"
        description: "Number of blocked locks (possible deadlocks)"
        labels:
          - mode

pg_deadlocks_total:
  query: |
    SELECT
      datname,
      deadlocks AS deadlocks_total
    FROM pg_stat_database;
  metrics:
    - deadlocks_total:
        usage: "COUNTER"
        description: "Total number of deadlocks per database"
        labels:
          - datname

pg_avg_session_count:
  query: |
    SELECT
      datname,
      count(*) AS session_count
    FROM pg_stat_activity
    GROUP BY datname;
  metrics:
    - session_count:
        usage: "GAUGE"
        description: "Current session count per database"
        labels:
          - datname


